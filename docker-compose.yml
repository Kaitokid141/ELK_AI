#version: "3.8"

volumes:
 certs:
   driver: local
 esdata01:
   driver: local
 kibanadata:
   driver: local
 logstashdata01:
   driver: local

networks:
 default:
   name: elastic
   external: false

services:
 setup:
   container_name: setup
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
         exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
         echo "Creating CA";
         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
         unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
         echo "Creating certs";
         echo -ne \
         "instances:\n"\
         "  - name: es01\n"\
         "    dns:\n"\
         "      - es01\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: kibana\n"\
         "    dns:\n"\
         "      - kibana\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         > config/certs/instances.yml;
         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
         unzip config/certs/certs.zip -d config/certs;
       fi;
       echo "Setting file permissions"
       chown -R root:root config/certs;
       find . -type d -exec chmod 750 \{\} \;;
       find . -type f -exec chmod 640 \{\} \;;
       echo "Waiting for Elasticsearch availability";
       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120

 es01:
   container_name: es01
   depends_on:
     setup:
       condition: service_healthy
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   labels:
     co.elastic.logs/module: elasticsearch
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
     - esdata01:/usr/share/elasticsearch/data
   ports:
     - ${ES_PORT}:9200
   environment:
     - node.name=es01
     - cluster.name=${CLUSTER_NAME}
     - cluster.initial_master_nodes=es01
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - bootstrap.memory_lock=true
     - xpack.security.enabled=true
     - xpack.security.http.ssl.enabled=true
     - xpack.security.http.ssl.key=certs/es01/es01.key
     - xpack.security.http.ssl.certificate=certs/es01/es01.crt
     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.enabled=true
     - xpack.security.transport.ssl.key=certs/es01/es01.key
     - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.verification_mode=certificate
     - xpack.license.self_generated.type=${LICENSE}
     - TZ=Asia/Bangkok
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120

 kibana:
   container_name: kibana
   depends_on:
     es01:
       condition: service_healthy
   image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
   labels:
     co.elastic.logs/module: kibana
   volumes:
     - certs:/usr/share/kibana/config/certs
     - kibanadata:/usr/share/kibana/data
   ports:
     - ${KIBANA_PORT}:5601
   environment:
     - SERVERNAME=kibana
     - ELASTICSEARCH_HOSTS=https://es01:9200
     - ELASTICSEARCH_USERNAME=kibana_system
     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
     - XPACK_SECURITY_ENCRYPTIONKEY=${SECURITY_ENCRYPTIONKEY}
     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY}
     - XPACK_REPORTING_ENCRYPTIONKEY=${REPORTING_ENCRYPTIONKEY}
     - TZ=Asia/Bangkok
   mem_limit: ${KB_MEM_LIMIT}
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120

 logstash:
   container_name: logstash
   depends_on:
     es01:
       condition: service_healthy
     kibana:
       condition: service_healthy
   image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
   labels:
     co.elastic.logs/module: logstash
   user: root
   volumes:
     - logstashdata01:/usr/share/logstash/data
     - certs:/usr/share/logstash/certs
     - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
     - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:rw
   environment:
     - NODE_NAME="logstash"
     - xpack.monitoring.enabled=false
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://es01:9200
     - TZ=Asia/Bangkok
   #command: logstash -f /usr/share/logstash/pipeline/logstash.conf
   command: logstash
  #  ports:
  #    - "5044:5044"
   expose:
     - "5044"
   mem_limit: ${LS_MEM_LIMIT}

 flask-ai:
   container_name: flask-ai
   image: flask_ai
   environment:
     - TZ=Asia/Bangkok
   expose:
     - "5000"
 
 dvwa:
   container_name: dvwa
   build:
     context: ./dvwa
     dockerfile: Dockerfile
   environment:
     - TZ=Asia/Bangkok
   ports:
     - "81:80"
  #  command: >
  #    bash -c 'filebeat -e -c /etc/filebeat/filebeat.yml'

 metricbeat:
   container_name: metricbeat
   image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
   volumes:
     - /var/run/docker.sock:/var/run/docker.sock:ro  # Gắn Docker socket để Metricbeat có thể lấy thông tin từ Docker
     - ./metricbeat/metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro 
   command: metricbeat -e -strict.perms=false -c /usr/share/metricbeat/metricbeat.yml 

#  auditbeat:
#    container_name: auditbeat
#    image: docker.elastic.co/beats/auditbeat:${STACK_VERSION}
#    user: root
#    privileged: true  # Cần quyền đặc biệt để thu thập thông tin
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock 
#      #- /etc:/etc  # Có thể cần để theo dõi các file hệ thống
#      #- /var/log:/var/log  # Để thu thập log từ hệ thống
#      - ./auditbeat/auditbeat.docker.yml:/usr/share/auditbeat/auditbeat.yml:ro
#    command: ["auditbeat", "-e", "-c", "/usr/share/auditbeat/auditbeat.yml", "--strict.perms=false"]

 ubuntu-client:
   container_name: ubuntu-client
   build:
     context: ./ubuntu-client
     dockerfile: Dockerfile
   environment:
     - TZ=Asia/Bangkok

 ubuntu-client1:
    build:
      context: ./ubuntu-client1
      dockerfile: DockerFile
    container_name: ubuntu-client1
    ports:
      - "2222:22"
    # volumes:
    #   - ./ssh/log:/var/log
    environment:
      - ROOT_PASSWORD=password
    stdin_open: true
    tty: true

 kali-linux:
   container_name: kali-linux
   image: kalilinux/kali-rolling
   tty: true
   stdin_open: true